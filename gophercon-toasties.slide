Designing go services for CD
Gophercon AU
10:00 1 Nov 2019
Tags: go, cd, tools, gophercon

Am Laher
Lead Engineer (API), Vend POS
@amfastic

* About Me

I've been a fanboy since I first tried [[https://golang.org/doc/devel/release.html#go1][Go1.0 in 2012]] . I helped start the GoAKL meetups in 2013.

.image ./kiwi-gopher-with-text.png

* About Me

I've been using Go as my primary language @ work since 2014, and working with CD approaches for a similar timeframe.

- Hapara, Inc ← _Some_CD_(gated)_
- Movio Ltd ← _Some_more_CD_(gated)_
- Vend ← *ALL*THE*CD*

* About Me

I love melted cheese.

.image https://media.giphy.com/media/VH8QBcXLrfz1u/giphy.gif

_More_on_that_later..._

* What is Continuous Delivery?

From [[https://continuousdelivery.com]]:

.caption Continuous Delivery is the ability to get changes of all types — including new features, configuration changes, bug fixes and experiments — into production, or into the hands of users, safely and quickly in a sustainable way.

In practical terms:

- CD := CI + auto-deploy
- A PR should trigger tests. 
- A merge [to master] should trigger a redeploy.

* Why? 

- Low-risk, high quality releases.
- Faster time-to-market.
- Lower costs.
- Better products.
- Happier Teams.

* Better, faster, stronger

_I'm_not_really_here_to_talk_about_"why",_but_please_read_the_following_slide_and_links_at_your_leisure._

- Low-risk releases: _The_primary_goal_of_continuous_delivery_is_to_make_software_deployments_painless,_low-risk_events_that_can_be_performed_at_any_time,_on_demand._

- Faster time to market: _It’s_not_uncommon_for_the_integration_and_test/fix_phase_of_the_traditional_phased_software_delivery_lifecycle_to_consume_weeks_or_even_months.__..._just_automate_it._

- Higher quality: _When_developers_have_automated_tools_that_discover_regressions_within_minutes,_teams_are_freed_to_focus_their_effort_on_user_research_and_higher_level_testing_activities._

- Better products: _CD_enables_techniques_like_[[http://ai.stanford.edu/~ronnyk/ExPThinkWeek2009Public.pdf][__A/B_testing_]],__to_test_ideas_with_users,_avoiding_the_2/3_of_features_we_build_which_deliver_no_value._

* Happier Teams.

_Continuous_Delivery_measurably_reduces_both_deployment_pain_and_team_burnout._

- Eliminate the cognitive load of deployment, and the human-error aspect of repetitive tasks.
- Manual deployment of complex systems (e.g. microservices) -> cognitive overload.
- Make deployment a non-thing, so you can think in terms of features.

-> with CD, teams become [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2681909][provably happier]].

* ORLY

.image https://media.giphy.com/media/5b5OU7aUekfdSAER5I/giphy.gif

Too good to be true??

* If I merge will I ded?

_"OMG_if_I_merge_this_then_everything_might_break_and_we'll_all_die."_

.image https://media.giphy.com/media/PxgaV6F5gMJSo/giphy.gif

Maybe this all sounds scary, and for sure, CD forces you to think about some things up-front. 

* Testing

The main thing is all about automated testing - _you_need_to_trust_those_tests._

- Repeatable, non-racy, non-flaky
- Test environment - prod-like? Docker/docker-compose? k8s?
- Integration tests - test those interactions
- Don't assume state

So, let's look at an example ...

* Toasties Galore

For this presentation, let's look at the software for an imaginary food truck "Toasties Galore".

- 2 services - chillybin & jafflotron.
- Both serve HTTP APIs. One connects to a Postgres database. 
- Per-service tests work on each service in isolation.
- Integration tests invoke the APIs and test the interactions.
- A test environment with docker-compose
- Supporting scripts

* Demo

.image https://media.giphy.com/media/3o6nV7z9RdhddK9bBC/giphy.gif


* Tests

.code -edit ./integration-tests/integration_test.go 

* Chilly bin

.code ./chillybin/main.go /^func main/,/^}/

* Jafflotron

.play ./jafflotron/main.go /^func main/,/^}/


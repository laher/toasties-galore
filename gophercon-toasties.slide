Designing go services for CD
Gophercon AU
10:00 1 Nov 2019
Tags: go, cd, tools, gophercon

Am Laher
Lead Engineer (API), Vend POS
@amfastic

* About Me

I've been a fanboy since I first tried [[https://golang.org/doc/devel/release.html#go1][Go1.0 in 2012]] . I helped start the GoAKL meetups in 2013.

.image ./kiwi-gopher-with-text.png

* About Me

I've been using Go as my primary language @ work since 2014, and working with CD approaches for a similar timeframe.

: Hapara, Inc ← _Some_CD_(gated)_
: Movio Ltd ← _Some_more_CD_(gated)_
: Vend ← *ALL*THE*CD*
: Also, I like melted cheese.
: .image https://media.giphy.com/media/VH8QBcXLrfz1u/giphy.gif
: Apologies to vegans
: _More_on_that_later..._

* What is Continuous Delivery?

Releasing software seamlessly.

	cd := ci + autoDeploy

Definition from [[https://continuousdelivery.com]]:

.caption Continuous Delivery is the ability to get changes of all types — including new features, configuration changes, bug fixes and experiments — into production, or into the hands of users, safely and quickly in a sustainable way.

An interpretation:

- A PR triggers tests.  ← _CI_
- A merge [to master] should trigger a redeploy. ← _CD_

* It's a Huge Topic

I could talk about rationales, about CI tools, about pipelines and environments.

.image https://i.imgur.com/XRuosfH.gif

I could talk for 30 minutes on any of these topics.

But this is Gophercon AU.

* I'm gonna talk about Go

: CD can and should influence the way you write code.
: In the same way that a unit test can help you refactor some awkward code, CD can help you out too.
: CDDD, if you like.
: I'm going to try to explain that using Go tools.

* .. and Toasties Galore

* Approaches

I'm going to cover ...

- Approaches for Testing 
- Downtimeless Deploys
- Sustainable change and 'breaking' changes
- Tooling to help with CD
- Tooling enabled by CD
- Configuration

* But first, ...

* Why? 

_I'm_not_really_here_to_talk_about_"why",_but_plenty_of_research_has_shown_..._

- Low-risk, high quality releases.
- Faster time-to-market.
- Lower costs.
- Better products.
- Happier Teams.

: Low-risk releases: _The_primary_goal_of_continuous_delivery_is_to_make_software_deployments_painless,_low-risk_events_that_can_be_performed_at_any_time,_on_demand._
: Faster time to market: _It’s_not_uncommon_for_the_integration_and_test/fix_phase_of_the_traditional_phased_software_delivery_lifecycle_to_consume_weeks_or_even_months._..._just_automate_it._
: Higher quality: _When_developers_have_automated_tools_that_discover_regressions_within_minutes,_teams_are_freed_to_focus_their_effort_on_user_research_and_higher_level_testing_activities._
: Better products: _CD_enables_techniques_like_[[http://ai.stanford.edu/~ronnyk/ExPThinkWeek2009Public.pdf][__A/B_testing_]],__to_test_ideas_with_users,_avoiding_the_2/3_of_features_we_build_which_deliver_no_value._
: This is all backing info. Please read in your own time.

* Happier Teams.

_Continuous_Delivery_measurably_reduces_both_deployment_pain_and_team_burnout._

- Eliminate the cognitive load of deployment, and the human-error aspect of repetitive tasks.
- Manual deployment of complex systems (e.g. microservices) -> cognitive overload.
- Make deployment a non-thing, so you can focus on features and fixes.
- Get on with creating.

-> with CD, teams become [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2681909][provably happier]].

* Rethinking our code ...

* Rethinking Configuration

Knobs and twiddles - bake them in:

- Where possible, compile it in - simplify your code.
- In other cases, it can live in the artifact (file in docker image)
- To reconfigure, change your code - redeploy is as fast as a config change.

* CD does what?

Mainly - less config

* Per-environment config

Things we need to configure boil down to env-specific params 

- Database DSNs
- scale-dependent variables
- Feature flags?

* Tooling

@overlord ...

At Vend we [they] wrote a slackbot which handles a number of CD-related utilities.

For example: 
 - canary deploys
 - rollbacks
 - feature flagging
 - service status

* Tooling

In a monorepo, it's real useful to know which services are affected by a commit.

Or put another way, which services have been affected since current production.

* Current version

Check 'current version of a service'.

.code ./scripts/last_commit.sh

- calls `go list -deps` and eventually `| git rev-list`
- Allows us to run regression tests at the right time.
- Report that the deploy was really successful.

: This was really just a bash script parsing the json output of `kubectl get pod`. 
: To me this kind of thing is crucial for regression testing.

* Wait, but ...

.image https://media.giphy.com/media/5b5OU7aUekfdSAER5I/giphy.gif

is this too good to be true?

* If I merge will I ded?

_"OMG_if_I_merge_this_then_everything_might_break_and_we'll_all_die."_

.image https://media.giphy.com/media/PxgaV6F5gMJSo/giphy.gif

: Maybe this all sounds scary, and for sure, CD forces you to think about some things up-front.

* Effort?

Won't this take a lot of maintenance?

.image https://lunarlincoln.com/wp-content/uploads/2016/04/200-1-1.gif

: Sure, there's some time cost to setting up automation - but once you're relying on those tests, it feels like it's for free.

* CI tools

Travis, Jenkins, Drone, Concourse, Bazel, Github Actions...

- So many great tools. 
- Pick one.

* But ...

I'm not really here to talk about that.

I'm also not here to talk about platforms like travis, jenkins, drone...

I'm here to talk about your code.

TODO

* Testing

CD is all about automated testing - _you_need_to_trust_those_tests._

- Repeatable and reliable - non-racy, non-flaky ... fast
- Environment - prod-like? Docker/docker-compose? k8s?
- Write a few integration tests - test those interactions.
- Don't assume state.

So, let's look at an example ...

* Toasties Galore

For this presentation, let's look at the software for an imaginary food truck "Toasties Galore".

- 2 services - chillybin & jafflr.
- Both serve HTTP APIs. One connects to a Postgres database. 
- Per-service tests work on each service in isolation.
- Integration tests invoke the APIs and test the interactions.
- A test environment with docker-compose
- Supporting scripts

* Demo

.image https://media.giphy.com/media/3o6nV7z9RdhddK9bBC/giphy.gif

* Integration Tests

.code -edit ./integration-tests/integration_test.go 

* Downtimeless Deploys

- Graceful restarts.
- Automated DB migrations.
- Healthchecks.
- State.

* Graceful Restarts

Stop listening on a port, while continuing to serve existing connections. 
Allow other [new] instances to listen instead.

.code -edit ./tpi/http.go /^func GracefulShutdownOSInterrupt/,/^}/

* DB migrations

Changes to DB schema, usually in line with code changes.

- There's plenty of options - goose, dbmate, go-migrate.
- Let's try go-migrate.
- Let's apply migrations at startup.

* Chilly bin - migrations

.code ./chillybin/main.go /^func runMigrationsSource/,/^}/


* Sustainable change

Oh breaking changes

- Migrations (see above!)
- Feature Flags
- API versioning
- The 3-step release

* jafflr

.play ./jafflr/main.go /^func main/,/^}/

* Conclusions

I've just tried to show you some go-specific hints about the CI/CD toolchain.

I didn't even try to recommend a CI system

It can take some time to redesign your software for Continuous Deployment - after seeing this talk, I hope you’ll begin or complete that journey.


